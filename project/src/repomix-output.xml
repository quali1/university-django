This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
backend/
  authentication/
    migrations/
      0001_initial.py
    admin.py
    apps.py
    models.py
    serializers.py
    tests.py
    urls.py
    views.py
  restaurant/
    migrations/
      0001_initial.py
    admin.py
    apps.py
    models.py
    serializers.py
    tests.py
    urls.py
    views.py
  restaurant_system/
    asgi.py
    settings.py
    urls.py
    wsgi.py
  manage.py
frontend/
  css/
    style.css
  js/
    admin.js
    api.js
    auth.js
    menu.js
    orders.js
    reservations.js
  pages/
    admin.html
    menu.html
    orders.html
    register.html
    reservations.html
  index.html
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backend/authentication/migrations/0001_initial.py">
# Generated by Django 5.2.3 on 2025-06-10 19:35

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                ("phone", models.CharField(blank=True, max_length=20)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("client", "Client"),
                            ("waiter", "Waiter"),
                            ("admin", "Administrator"),
                        ],
                        default="client",
                        max_length=10,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
</file>

<file path="backend/authentication/admin.py">
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import User

@admin.register(User)
class UserAdmin(BaseUserAdmin):
    list_display = ['email', 'first_name', 'last_name', 'role', 'is_active', 'created_at']
    list_filter = ['role', 'is_active', 'is_staff']
    search_fields = ['email', 'first_name', 'last_name']
    ordering = ['-created_at']
    
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Personal Info', {'fields': ('first_name', 'last_name', 'phone')}),
        ('Permissions', {'fields': ('role', 'is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login', 'created_at', 'updated_at')}),
    )
    
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'password1', 'password2', 'first_name', 'last_name', 'role'),
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at', 'last_login']
</file>

<file path="backend/authentication/apps.py">
from django.apps import AppConfig


class AuthenticationConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "authentication"
</file>

<file path="backend/authentication/models.py">
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models

class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('Email address is required')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('role', 'admin')
        return self.create_user(email, password, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    ROLE_CHOICES = [
        ('client', 'Client'),
        ('waiter', 'Waiter'),
        ('admin', 'Administrator'),
    ]
    
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    phone = models.CharField(max_length=20, blank=True)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='client')
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    objects = UserManager()
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']
    
    def __str__(self):
        return self.email
</file>

<file path="backend/authentication/serializers.py">
from rest_framework import serializers
from django.contrib.auth import get_user_model
from django.contrib.auth.password_validation import validate_password

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'first_name', 'last_name', 'phone', 'role', 'is_active', 'created_at']
        read_only_fields = ['id', 'created_at']

class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, validators=[validate_password])
    password_confirm = serializers.CharField(write_only=True)
    
    class Meta:
        model = User
        fields = ['email', 'password', 'password_confirm', 'first_name', 'last_name', 'phone']
    
    def validate(self, attrs):
        if attrs['password'] != attrs['password_confirm']:
            raise serializers.ValidationError({'password': 'Passwords do not match'})
        return attrs
    
    def create(self, validated_data):
        validated_data.pop('password_confirm')
        user = User.objects.create_user(**validated_data)
        return user

class ChangePasswordSerializer(serializers.Serializer):
    old_password = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True, validators=[validate_password])
    
    def validate_old_password(self, value):
        user = self.context['request'].user
        if not user.check_password(value):
            raise serializers.ValidationError('Invalid password')
        return value
</file>

<file path="backend/authentication/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="backend/authentication/urls.py">
from django.urls import path
from rest_framework_simplejwt.views import TokenRefreshView
from .views import (
    RegisterView, UserProfileView, ChangePasswordView,
    CustomTokenObtainPairView, get_current_user
)

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('profile/', UserProfileView.as_view(), name='user_profile'),
    path('change-password/', ChangePasswordView.as_view(), name='change_password'),
    path('me/', get_current_user, name='current_user'),
]
</file>

<file path="backend/authentication/views.py">
from rest_framework import generics, status, permissions
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework_simplejwt.views import TokenObtainPairView
from django.contrib.auth import get_user_model
from .serializers import UserSerializer, UserRegistrationSerializer, ChangePasswordSerializer

User = get_user_model()

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserRegistrationSerializer
    permission_classes = [permissions.AllowAny]

class UserProfileView(generics.RetrieveUpdateAPIView):
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_object(self):
        return self.request.user

class ChangePasswordView(generics.UpdateAPIView):
    serializer_class = ChangePasswordSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_object(self):
        return self.request.user
    
    def update(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        user = self.get_object()
        user.set_password(serializer.validated_data['new_password'])
        user.save()
        
        return Response({'detail': 'Password updated successfully'}, status=status.HTTP_200_OK)

class CustomTokenObtainPairView(TokenObtainPairView):
    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        if response.status_code == 200:
            user = User.objects.get(email=request.data['email'])
            user_data = UserSerializer(user).data
            response.data['user'] = user_data
        return response

@api_view(['GET'])
@permission_classes([permissions.IsAuthenticated])
def get_current_user(request):
    serializer = UserSerializer(request.user)
    return Response(serializer.data)
</file>

<file path="backend/restaurant/migrations/0001_initial.py">
# Generated by Django 5.2.3 on 2025-06-10 19:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("quantity", models.DecimalField(decimal_places=2, max_digits=10)),
                ("unit", models.CharField(max_length=20)),
                (
                    "minimum_quantity",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("supplier", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="MenuItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("appetizer", "Appetizer"),
                            ("main", "Main Course"),
                            ("dessert", "Dessert"),
                            ("beverage", "Beverage"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_available", models.BooleanField(default=True)),
                ("is_vegetarian", models.BooleanField(default=False)),
                ("is_vegan", models.BooleanField(default=False)),
                ("is_gluten_free", models.BooleanField(default=False)),
                ("preparation_time", models.IntegerField(help_text="Time in minutes")),
                ("image_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("preparing", "In Preparation"),
                            ("ready", "Ready for Pickup"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "order_type",
                    models.CharField(
                        choices=[
                            ("dine_in", "Dine In"),
                            ("takeout", "Takeout"),
                            ("delivery", "Delivery"),
                        ],
                        default="dine_in",
                        max_length=20,
                    ),
                ),
                ("table_number", models.IntegerField(blank=True, null=True)),
                (
                    "total_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "final_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("special_instructions", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "waiter",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "waiter"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="served_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("subtotal", models.DecimalField(decimal_places=2, max_digits=10)),
                ("notes", models.TextField(blank=True)),
                (
                    "menu_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="restaurant.menuitem",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="restaurant.order",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Promotion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "discount_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "minimum_order_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("promo_code", models.CharField(max_length=20, unique=True)),
                ("max_uses", models.IntegerField(default=0)),
                ("current_uses", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "applicable_items",
                    models.ManyToManyField(blank=True, to="restaurant.menuitem"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("time", models.TimeField()),
                ("party_size", models.PositiveIntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                            ("completed", "Completed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("table_number", models.IntegerField(blank=True, null=True)),
                ("special_requests", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="order",
            name="reservation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="restaurant.reservation",
            ),
        ),
        migrations.CreateModel(
            name="MenuItemIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity_required",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="restaurant.ingredient",
                    ),
                ),
                (
                    "menu_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="restaurant.menuitem",
                    ),
                ),
            ],
            options={
                "unique_together": {("menu_item", "ingredient")},
            },
        ),
    ]
</file>

<file path="backend/restaurant/admin.py">
from django.contrib import admin
from .models import (
    Reservation, Ingredient, MenuItem, MenuItemIngredient,
    Order, OrderItem, Promotion
)

@admin.register(Reservation)
class ReservationAdmin(admin.ModelAdmin):
    list_display = ['user', 'date', 'time', 'party_size', 'status', 'table_number', 'created_at']
    list_filter = ['status', 'date']
    search_fields = ['user__email', 'user__first_name', 'user__last_name']
    date_hierarchy = 'date'

@admin.register(Ingredient)
class IngredientAdmin(admin.ModelAdmin):
    list_display = ['name', 'quantity', 'unit', 'minimum_quantity', 'is_low_stock', 'supplier']
    list_filter = ['supplier']
    search_fields = ['name', 'supplier']

class MenuItemIngredientInline(admin.TabularInline):
    model = MenuItemIngredient
    extra = 1

@admin.register(MenuItem)
class MenuItemAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'price', 'is_available', 'is_vegetarian', 'is_vegan', 'is_gluten_free']
    list_filter = ['category', 'is_available', 'is_vegetarian', 'is_vegan', 'is_gluten_free']
    search_fields = ['name', 'description']
    inlines = [MenuItemIngredientInline]

class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 0
    readonly_fields = ['price', 'subtotal']

@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ['id', 'user', 'waiter', 'status', 'order_type', 'total_amount', 'created_at']
    list_filter = ['status', 'order_type', 'created_at']
    search_fields = ['user__email', 'user__first_name', 'user__last_name']
    date_hierarchy = 'created_at'
    inlines = [OrderItemInline]
    readonly_fields = ['total_amount', 'final_amount']

@admin.register(Promotion)
class PromotionAdmin(admin.ModelAdmin):
    list_display = ['name', 'promo_code', 'discount_percentage', 'start_date', 'end_date', 'is_active', 'is_valid']
    list_filter = ['is_active', 'start_date', 'end_date']
    search_fields = ['name', 'promo_code']
    filter_horizontal = ['applicable_items']
</file>

<file path="backend/restaurant/apps.py">
from django.apps import AppConfig


class RestaurantConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "restaurant"
</file>

<file path="backend/restaurant/models.py">
from django.db import models
from django.conf import settings

class Reservation(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('confirmed', 'Confirmed'),
        ('cancelled', 'Cancelled'),
        ('completed', 'Completed'),
    ]
    
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='reservations')
    date = models.DateField()
    time = models.TimeField()
    party_size = models.PositiveIntegerField()
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    table_number = models.IntegerField(null=True, blank=True)
    special_requests = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Reservation for {self.user.email} on {self.date} at {self.time}"

class Ingredient(models.Model):
    name = models.CharField(max_length=100, unique=True)
    quantity = models.DecimalField(max_digits=10, decimal_places=2)
    unit = models.CharField(max_length=20)
    minimum_quantity = models.DecimalField(max_digits=10, decimal_places=2)
    price_per_unit = models.DecimalField(max_digits=10, decimal_places=2)
    supplier = models.CharField(max_length=100, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.name
    
    @property
    def is_low_stock(self):
        return self.quantity <= self.minimum_quantity

class MenuItem(models.Model):
    CATEGORY_CHOICES = [
        ('appetizer', 'Appetizer'),
        ('main', 'Main Course'),
        ('dessert', 'Dessert'),
        ('beverage', 'Beverage'),
    ]
    
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)
    is_available = models.BooleanField(default=True)
    is_vegetarian = models.BooleanField(default=False)
    is_vegan = models.BooleanField(default=False)
    is_gluten_free = models.BooleanField(default=False)
    preparation_time = models.IntegerField(help_text='Time in minutes')
    image_url = models.URLField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.name

class MenuItemIngredient(models.Model):
    menu_item = models.ForeignKey(MenuItem, on_delete=models.CASCADE, related_name='ingredients')
    ingredient = models.ForeignKey(Ingredient, on_delete=models.CASCADE)
    quantity_required = models.DecimalField(max_digits=10, decimal_places=2)
    
    class Meta:
        unique_together = ['menu_item', 'ingredient']
    
    def __str__(self):
        return f"{self.menu_item.name} - {self.ingredient.name}"

class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('preparing', 'In Preparation'),
        ('ready', 'Ready for Pickup'),
        ('delivered', 'Delivered'),
        ('cancelled', 'Cancelled'),
    ]
    
    ORDER_TYPE_CHOICES = [
        ('dine_in', 'Dine In'),
        ('takeout', 'Takeout'),
        ('delivery', 'Delivery'),
    ]
    
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='orders')
    waiter = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, 
                               related_name='served_orders', limit_choices_to={'role': 'waiter'})
    reservation = models.ForeignKey(Reservation, on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    order_type = models.CharField(max_length=20, choices=ORDER_TYPE_CHOICES, default='dine_in')
    table_number = models.IntegerField(null=True, blank=True)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    final_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    special_instructions = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Order #{self.id} - {self.user.email}"
    
    def calculate_total(self):
        total = sum(item.subtotal for item in self.items.all())
        self.total_amount = total
        self.final_amount = total - (total * self.discount_percentage / 100)
        self.save()

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    menu_item = models.ForeignKey(MenuItem, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    subtotal = models.DecimalField(max_digits=10, decimal_places=2)
    notes = models.TextField(blank=True)
    
    def __str__(self):
        return f"{self.quantity}x {self.menu_item.name}"
    
    def save(self, *args, **kwargs):
        self.price = self.menu_item.price
        self.subtotal = self.price * self.quantity
        super().save(*args, **kwargs)
        self.order.calculate_total()

class Promotion(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    is_active = models.BooleanField(default=True)
    minimum_order_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    applicable_items = models.ManyToManyField(MenuItem, blank=True)
    promo_code = models.CharField(max_length=20, unique=True)
    max_uses = models.IntegerField(default=0)
    current_uses = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.name
    
    @property
    def is_valid(self):
        from django.utils import timezone
        now = timezone.now()
        return (self.is_active and 
                self.start_date <= now <= self.end_date and
                (self.max_uses == 0 or self.current_uses < self.max_uses))
</file>

<file path="backend/restaurant/serializers.py">
from rest_framework import serializers
from .models import (
    Reservation, Ingredient, MenuItem, MenuItemIngredient, 
    Order, OrderItem, Promotion
)
from authentication.serializers import UserSerializer

class ReservationSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    user_id = serializers.IntegerField(write_only=True, required=False)
    
    class Meta:
        model = Reservation
        fields = ['id', 'user', 'user_id', 'date', 'time', 'party_size', 
                 'status', 'table_number', 'special_requests', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']
    
    def create(self, validated_data):
        if 'user_id' not in validated_data:
            validated_data['user'] = self.context['request'].user
        else:
            validated_data['user_id'] = validated_data.pop('user_id')
        return super().create(validated_data)

class IngredientSerializer(serializers.ModelSerializer):
    is_low_stock = serializers.ReadOnlyField()
    
    class Meta:
        model = Ingredient
        fields = ['id', 'name', 'quantity', 'unit', 'minimum_quantity', 
                 'price_per_unit', 'supplier', 'is_low_stock', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']

class MenuItemIngredientSerializer(serializers.ModelSerializer):
    ingredient_name = serializers.CharField(source='ingredient.name', read_only=True)
    
    class Meta:
        model = MenuItemIngredient
        fields = ['id', 'ingredient', 'ingredient_name', 'quantity_required']

class MenuItemSerializer(serializers.ModelSerializer):
    ingredients = MenuItemIngredientSerializer(many=True, read_only=True)
    
    class Meta:
        model = MenuItem
        fields = ['id', 'name', 'description', 'price', 'category', 'is_available',
                 'is_vegetarian', 'is_vegan', 'is_gluten_free', 'preparation_time',
                 'image_url', 'ingredients', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']

class OrderItemSerializer(serializers.ModelSerializer):
    menu_item_name = serializers.CharField(source='menu_item.name', read_only=True)
    
    class Meta:
        model = OrderItem
        fields = ['id', 'menu_item', 'menu_item_name', 'quantity', 'price', 'subtotal', 'notes']
        read_only_fields = ['id', 'price', 'subtotal']

class OrderSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    waiter = UserSerializer(read_only=True)
    items = OrderItemSerializer(many=True, read_only=True)
    
    class Meta:
        model = Order
        fields = ['id', 'user', 'waiter', 'reservation', 'status', 'order_type',
                 'table_number', 'total_amount', 'discount_percentage', 'final_amount',
                 'special_instructions', 'items', 'created_at', 'updated_at']
        read_only_fields = ['id', 'total_amount', 'final_amount', 'created_at', 'updated_at']

class OrderCreateSerializer(serializers.ModelSerializer):
    items = serializers.ListField(child=serializers.DictField(), write_only=True)
    promo_code = serializers.CharField(write_only=True, required=False)
    
    class Meta:
        model = Order
        fields = ['order_type', 'table_number', 'special_instructions', 'items', 'promo_code', 'reservation']
    
    def create(self, validated_data):
        items_data = validated_data.pop('items')
        promo_code = validated_data.pop('promo_code', None)
        
        order = Order.objects.create(
            user=self.context['request'].user,
            **validated_data
        )
        
        for item_data in items_data:
            OrderItem.objects.create(
                order=order,
                menu_item_id=item_data['menu_item_id'],
                quantity=item_data['quantity'],
                notes=item_data.get('notes', '')
            )
        
        if promo_code:
            try:
                promotion = Promotion.objects.get(promo_code=promo_code)
                if promotion.is_valid and order.total_amount >= promotion.minimum_order_amount:
                    order.discount_percentage = promotion.discount_percentage
                    promotion.current_uses += 1
                    promotion.save()
                    order.calculate_total()
            except Promotion.DoesNotExist:
                pass
        
        return order

class PromotionSerializer(serializers.ModelSerializer):
    is_valid = serializers.ReadOnlyField()
    
    class Meta:
        model = Promotion
        fields = ['id', 'name', 'description', 'discount_percentage', 'start_date',
                 'end_date', 'is_active', 'minimum_order_amount', 'applicable_items',
                 'promo_code', 'max_uses', 'current_uses', 'is_valid', 'created_at']
        read_only_fields = ['id', 'current_uses', 'created_at']
</file>

<file path="backend/restaurant/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="backend/restaurant/urls.py">
from django.urls import path
from .views import (
    ReservationListCreateView, ReservationDetailView,
    IngredientListCreateView, IngredientDetailView,
    MenuItemListCreateView, MenuItemDetailView,
    OrderListCreateView, OrderDetailView,
    PromotionListView, add_menu_item_ingredient,
    low_stock_ingredients, assign_waiter_to_order,
    update_order_status, sales_report, inventory_report
)

urlpatterns = [
    path('reservations/', ReservationListCreateView.as_view(), name='reservation-list'),
    path('reservations/<int:pk>/', ReservationDetailView.as_view(), name='reservation-detail'),
    
    path('ingredients/', IngredientListCreateView.as_view(), name='ingredient-list'),
    path('ingredients/<int:pk>/', IngredientDetailView.as_view(), name='ingredient-detail'),
    path('ingredients/low-stock/', low_stock_ingredients, name='low-stock-ingredients'),
    
    path('menu-items/', MenuItemListCreateView.as_view(), name='menu-item-list'),
    path('menu-items/<int:pk>/', MenuItemDetailView.as_view(), name='menu-item-detail'),
    path('menu-items/<int:menu_item_id>/ingredients/', add_menu_item_ingredient, name='add-menu-item-ingredient'),
    
    path('orders/', OrderListCreateView.as_view(), name='order-list'),
    path('orders/<int:pk>/', OrderDetailView.as_view(), name='order-detail'),
    path('orders/<int:order_id>/assign-waiter/', assign_waiter_to_order, name='assign-waiter'),
    path('orders/<int:order_id>/update-status/', update_order_status, name='update-order-status'),
    
    path('promotions/', PromotionListView.as_view(), name='promotion-list'),
    
    path('reports/sales/', sales_report, name='sales-report'),
    path('reports/inventory/', inventory_report, name='inventory-report'),
]
</file>

<file path="backend/restaurant/views.py">
from rest_framework import generics, permissions, status, filters
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from django.db.models import Q, Sum, Count, F
from django.utils import timezone
from datetime import datetime, timedelta
from .models import (
    Reservation, Ingredient, MenuItem, MenuItemIngredient,
    Order, OrderItem, Promotion
)
from .serializers import (
    ReservationSerializer, IngredientSerializer, MenuItemSerializer,
    MenuItemIngredientSerializer, OrderSerializer, OrderCreateSerializer,
    OrderItemSerializer, PromotionSerializer
)

class IsOwnerOrAdmin(permissions.BasePermission):
    def has_object_permission(self, request, view, obj):
        if request.user.role == 'admin':
            return True
        if hasattr(obj, 'user'):
            return obj.user == request.user
        return False

class IsWaiterOrAdmin(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.role in ['waiter', 'admin']

class ReservationListCreateView(generics.ListCreateAPIView):
    serializer_class = ReservationSerializer
    permission_classes = [permissions.IsAuthenticated]
    filter_backends = [filters.OrderingFilter, filters.SearchFilter]
    ordering_fields = ['date', 'time', 'created_at']
    search_fields = ['user__email', 'user__first_name', 'user__last_name']
    
    def get_queryset(self):
        queryset = Reservation.objects.all()
        if self.request.user.role == 'client':
            queryset = queryset.filter(user=self.request.user)
        
        date_from = self.request.query_params.get('date_from')
        date_to = self.request.query_params.get('date_to')
        status = self.request.query_params.get('status')
        
        if date_from:
            queryset = queryset.filter(date__gte=date_from)
        if date_to:
            queryset = queryset.filter(date__lte=date_to)
        if status:
            queryset = queryset.filter(status=status)
        
        return queryset.order_by('-date', '-time')

class ReservationDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Reservation.objects.all()
    serializer_class = ReservationSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrAdmin]

class IngredientListCreateView(generics.ListCreateAPIView):
    queryset = Ingredient.objects.all()
    serializer_class = IngredientSerializer
    filter_backends = [filters.SearchFilter]
    search_fields = ['name', 'supplier']
    
    def get_permissions(self):
        if self.request.method == 'POST':
            return [permissions.IsAuthenticated(), IsWaiterOrAdmin()]
        return [permissions.IsAuthenticated()]

class IngredientDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Ingredient.objects.all()
    serializer_class = IngredientSerializer
    permission_classes = [permissions.IsAuthenticated, IsWaiterOrAdmin]

class MenuItemListCreateView(generics.ListCreateAPIView):
    serializer_class = MenuItemSerializer
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name', 'description', 'category']
    ordering_fields = ['price', 'name', 'category']
    
    def get_queryset(self):
        queryset = MenuItem.objects.all()
        category = self.request.query_params.get('category')
        is_available = self.request.query_params.get('is_available')
        is_vegetarian = self.request.query_params.get('is_vegetarian')
        is_vegan = self.request.query_params.get('is_vegan')
        is_gluten_free = self.request.query_params.get('is_gluten_free')
        
        if category:
            queryset = queryset.filter(category=category)
        if is_available is not None:
            queryset = queryset.filter(is_available=is_available.lower() == 'true')
        if is_vegetarian is not None:
            queryset = queryset.filter(is_vegetarian=is_vegetarian.lower() == 'true')
        if is_vegan is not None:
            queryset = queryset.filter(is_vegan=is_vegan.lower() == 'true')
        if is_gluten_free is not None:
            queryset = queryset.filter(is_gluten_free=is_gluten_free.lower() == 'true')
        
        return queryset
    
    def get_permissions(self):
        if self.request.method == 'POST':
            return [permissions.IsAuthenticated(), IsWaiterOrAdmin()]
        return [permissions.AllowAny()]

class MenuItemDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = MenuItem.objects.all()
    serializer_class = MenuItemSerializer
    
    def get_permissions(self):
        if self.request.method in ['PUT', 'PATCH', 'DELETE']:
            return [permissions.IsAuthenticated(), IsWaiterOrAdmin()]
        return [permissions.AllowAny()]

class OrderListCreateView(generics.ListCreateAPIView):
    permission_classes = [permissions.IsAuthenticated]
    filter_backends = [filters.OrderingFilter]
    ordering_fields = ['created_at', 'status']
    
    def get_serializer_class(self):
        if self.request.method == 'POST':
            return OrderCreateSerializer
        return OrderSerializer
    
    def get_queryset(self):
        queryset = Order.objects.all()
        if self.request.user.role == 'client':
            queryset = queryset.filter(user=self.request.user)
        elif self.request.user.role == 'waiter':
            queryset = queryset.filter(Q(waiter=self.request.user) | Q(waiter__isnull=True))
        
        status = self.request.query_params.get('status')
        order_type = self.request.query_params.get('order_type')
        date_from = self.request.query_params.get('date_from')
        date_to = self.request.query_params.get('date_to')
        
        if status:
            queryset = queryset.filter(status=status)
        if order_type:
            queryset = queryset.filter(order_type=order_type)
        if date_from:
            queryset = queryset.filter(created_at__date__gte=date_from)
        if date_to:
            queryset = queryset.filter(created_at__date__lte=date_to)
        
        return queryset.order_by('-created_at')

class OrderDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_permissions(self):
        if self.request.method == 'DELETE':
            return [permissions.IsAuthenticated(), IsWaiterOrAdmin()]
        return [permissions.IsAuthenticated()]

class PromotionListView(generics.ListCreateAPIView):
    serializer_class = PromotionSerializer
    
    def get_queryset(self):
        queryset = Promotion.objects.filter(is_active=True)
        return queryset.filter(
            start_date__lte=timezone.now(),
            end_date__gte=timezone.now()
        )
    
    def get_permissions(self):
        if self.request.method == 'POST':
            return [permissions.IsAuthenticated(), IsWaiterOrAdmin()]
        return [permissions.AllowAny()]

@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated, IsWaiterOrAdmin])
def add_menu_item_ingredient(request, menu_item_id):
    menu_item = get_object_or_404(MenuItem, id=menu_item_id)
    serializer = MenuItemIngredientSerializer(data=request.data)
    
    if serializer.is_valid():
        serializer.save(menu_item=menu_item)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
@permission_classes([permissions.IsAuthenticated])
def low_stock_ingredients(request):
    ingredients = Ingredient.objects.filter(quantity__lte=F('minimum_quantity'))
    serializer = IngredientSerializer(ingredients, many=True)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated, IsWaiterOrAdmin])
def assign_waiter_to_order(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    order.waiter = request.user
    order.save()
    serializer = OrderSerializer(order)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated, IsWaiterOrAdmin])
def update_order_status(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    new_status = request.data.get('status')
    
    if new_status not in dict(Order.STATUS_CHOICES):
        return Response({'error': 'Invalid status'}, status=status.HTTP_400_BAD_REQUEST)
    
    order.status = new_status
    order.save()
    serializer = OrderSerializer(order)
    return Response(serializer.data)

@api_view(['GET'])
@permission_classes([permissions.IsAuthenticated, IsWaiterOrAdmin])
def sales_report(request):
    date_from = request.query_params.get('date_from', timezone.now().date() - timedelta(days=30))
    date_to = request.query_params.get('date_to', timezone.now().date())
    
    orders = Order.objects.filter(
        created_at__date__range=[date_from, date_to],
        status__in=['delivered', 'ready']
    )
    
    total_sales = orders.aggregate(total=Sum('final_amount'))['total'] or 0
    total_orders = orders.count()
    
    daily_sales = orders.values('created_at__date').annotate(
        total=Sum('final_amount'),
        count=Count('id')
    ).order_by('created_at__date')
    
    category_sales = OrderItem.objects.filter(
        order__in=orders
    ).values('menu_item__category').annotate(
        total=Sum('subtotal'),
        count=Sum('quantity')
    )
    
    top_items = OrderItem.objects.filter(
        order__in=orders
    ).values('menu_item__name').annotate(
        total_quantity=Sum('quantity'),
        total_revenue=Sum('subtotal')
    ).order_by('-total_quantity')[:10]
    
    return Response({
        'total_sales': total_sales,
        'total_orders': total_orders,
        'average_order_value': total_sales / total_orders if total_orders > 0 else 0,
        'daily_sales': daily_sales,
        'category_sales': category_sales,
        'top_items': top_items
    })

@api_view(['GET'])
@permission_classes([permissions.IsAuthenticated, IsWaiterOrAdmin])
def inventory_report(request):
    low_stock = Ingredient.objects.filter(quantity__lte=F('minimum_quantity'))
    total_value = Ingredient.objects.aggregate(
        total=Sum(F('quantity') * F('price_per_unit'))
    )['total'] or 0
    
    ingredient_usage = MenuItemIngredient.objects.values(
        'ingredient__name'
    ).annotate(
        total_usage=Sum('quantity_required'),
        menu_items_count=Count('menu_item', distinct=True)
    ).order_by('-total_usage')
    
    return Response({
        'low_stock_count': low_stock.count(),
        'low_stock_items': IngredientSerializer(low_stock, many=True).data,
        'total_inventory_value': total_value,
        'ingredient_usage': ingredient_usage
    })
</file>

<file path="backend/restaurant_system/asgi.py">
"""
ASGI config for restaurant_system project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "restaurant_system.settings")

application = get_asgi_application()
</file>

<file path="backend/restaurant_system/settings.py">
"""
Django settings for restaurant_system project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*$nxov$uk91$%+4llxyc)cef)i$td)i8q^l=zinac&gza9*car"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',
    'rest_framework_simplejwt',
    'restaurant',
    'authentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "restaurant_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "restaurant_system.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'authentication.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}
</file>

<file path="backend/restaurant_system/urls.py">
"""
URL configuration for restaurant_system project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/auth/', include('authentication.urls')),
    path('api/', include('restaurant.urls')),
]
</file>

<file path="backend/restaurant_system/wsgi.py">
"""
WSGI config for restaurant_system project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "restaurant_system.settings")

application = get_wsgi_application()
</file>

<file path="backend/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "restaurant_system.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
</file>

<file path="frontend/css/style.css">
body {
    background-color: #f8f9fa;
}

.navbar-brand {
    font-weight: bold;
    font-size: 1.5rem;
}

.card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border: none;
}

.table th {
    background-color: #f8f9fa;
    font-weight: 600;
}

.btn {
    border-radius: 0.375rem;
}

.toast {
    min-width: 250px;
}

.form-label {
    font-weight: 500;
    color: #495057;
}

.navbar-dark .navbar-nav .nav-link {
    color: rgba(255, 255, 255, 0.85);
}

.navbar-dark .navbar-nav .nav-link:hover {
    color: rgba(255, 255, 255, 1);
}

.navbar-dark .navbar-nav .nav-link.active {
    color: #fff;
    font-weight: 500;
}
</file>

<file path="frontend/js/admin.js">
async function loadSalesReport() {
    try {
        const response = await apiCall('/reports/sales/');
        const report = await response.json();
        displaySalesReport(report);
    } catch (error) {
        showToast('Błąd podczas ładowania raportu sprzedaży', 'error');
    }
}

async function loadInventoryReport() {
    try {
        const response = await apiCall('/reports/inventory/');
        const report = await response.json();
        displayInventoryReport(report);
    } catch (error) {
        showToast('Błąd podczas ładowania raportu magazynu', 'error');
    }
}

async function loadLowStockItems() {
    try {
        const response = await apiCall('/ingredients/low-stock/');
        const items = await response.json();
        displayLowStockItems(items);
    } catch (error) {
        showToast('Błąd podczas ładowania składników', 'error');
    }
}

function displaySalesReport(report) {
    const container = document.getElementById('salesReport');
    container.innerHTML = `
        <p><strong>Całkowita sprzedaż:</strong> ${report.total_sales || 0} PLN</p>
        <p><strong>Liczba zamówień:</strong> ${report.total_orders || 0}</p>
        <p><strong>Średnia wartość zamówienia:</strong> ${report.average_order_value?.toFixed(2) || 0} PLN</p>
        <hr>
        <h6>Top 5 produktów:</h6>
        <ul>
            ${report.top_items?.slice(0, 5).map(item => 
                `<li>${item.menu_item__name} - ${item.total_quantity} szt.</li>`
            ).join('') || '<li>Brak danych</li>'}
        </ul>
    `;
}

function displayInventoryReport(report) {
    const container = document.getElementById('inventoryReport');
    container.innerHTML = `
        <p><strong>Wartość magazynu:</strong> ${report.total_inventory_value?.toFixed(2) || 0} PLN</p>
        <p><strong>Składniki poniżej minimum:</strong> ${report.low_stock_count || 0}</p>
        <div class="alert alert-warning mt-3">
            ${report.low_stock_count > 0 ? 
                'Uwaga! Niektóre składniki wymagają uzupełnienia' : 
                'Wszystkie składniki są w wystarczającej ilości'}
        </div>
    `;
}

function displayLowStockItems(items) {
    const tbody = document.getElementById('lowStockTableBody');
    tbody.innerHTML = '';

    if (items.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="text-center">Brak składników poniżej minimum</td></tr>';
        return;
    }

    items.forEach(item => {
        const row = tbody.insertRow();
        row.innerHTML = `
            <td>${item.name}</td>
            <td>${item.quantity} ${item.unit}</td>
            <td>${item.minimum_quantity} ${item.unit}</td>
            <td>${item.supplier || '-'}</td>
        `;
    });
}

window.addEventListener('DOMContentLoaded', () => {
    checkAuth();
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    if (user.role !== 'admin') {
        window.location.href = '../index.html';
        return;
    }

    loadSalesReport();
    loadInventoryReport();
    loadLowStockItems();
});
</file>

<file path="frontend/js/api.js">
const API_BASE = 'http://localhost:8000/api';

async function apiCall(endpoint, options = {}) {
    const token = localStorage.getItem('access_token');

    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
        }
    };

    if (token) {
        defaultOptions.headers['Authorization'] = `Bearer ${token}`;
    }

    const finalOptions = { ...defaultOptions, ...options };
    if (finalOptions.headers) {
        finalOptions.headers = { ...defaultOptions.headers, ...options.headers };
    }

    try {
        const response = await fetch(`${API_BASE}${endpoint}`, finalOptions);

        if (response.status === 401) {
            const refreshToken = localStorage.getItem('refresh_token');
            if (refreshToken) {
                const refreshResponse = await fetch(`${API_BASE}/auth/token/refresh/`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ refresh: refreshToken })
                });

                if (refreshResponse.ok) {
                    const data = await refreshResponse.json();
                    localStorage.setItem('access_token', data.access);
                    finalOptions.headers['Authorization'] = `Bearer ${data.access}`;
                    return fetch(`${API_BASE}${endpoint}`, finalOptions);
                }
            }

            localStorage.clear();
            window.location.href = '/index.html';
            return;
        }

        return response;
    } catch (error) {
        showToast('Błąd połączenia z serwerem', 'error');
        throw error;
    }
}

function showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');

    if (toast && toastMessage) {
        toastMessage.textContent = message;
        toast.className = `toast ${type === 'error' ? 'bg-danger' : type === 'success' ? 'bg-success' : 'bg-info'} text-white`;
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }
}
</file>

<file path="frontend/js/auth.js">
async function login(event) {
    event.preventDefault();

    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    try {
        const response = await fetch(`${API_BASE}/auth/login/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });

        if (response.ok) {
            const data = await response.json();
            localStorage.setItem('access_token', data.access);
            localStorage.setItem('refresh_token', data.refresh);
            localStorage.setItem('user', JSON.stringify(data.user));

            showToast('Zalogowano pomyślnie', 'success');
            setTimeout(() => {
                checkAuth();
            }, 1000);
        } else {
            showToast('Nieprawidłowy email lub hasło', 'error');
        }
    } catch (error) {
        showToast('Błąd podczas logowania', 'error');
    }
}

function logout() {
    localStorage.clear();
    window.location.href = '/index.html';
}

function checkAuth() {
    const token = localStorage.getItem('access_token');
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    const loginForm = document.getElementById('loginForm');
    const dashboard = document.getElementById('dashboard');
    const userName = document.getElementById('userName');

    if (token && user.email) {
        if (loginForm) loginForm.style.display = 'none';
        if (dashboard) dashboard.style.display = 'block';
        if (userName) userName.textContent = `${user.first_name} ${user.last_name}`;

        const navAdmin = document.getElementById('navAdmin');
        const navOrders = document.getElementById('navOrders');
        const navReservations = document.getElementById('navReservations');
        const dashOrders = document.getElementById('dashOrders');
        const dashReservations = document.getElementById('dashReservations');

        if (user.role === 'admin') {
            if (navAdmin) navAdmin.style.display = 'block';
        }

        if (user.role === 'client') {
            if (navOrders) navOrders.style.display = 'none';
            if (dashOrders) dashOrders.style.display = 'none';
        }
    } else {
        if (loginForm) loginForm.style.display = 'block';
        if (dashboard) dashboard.style.display = 'none';
    }
}

window.addEventListener('DOMContentLoaded', checkAuth);
</file>

<file path="frontend/js/menu.js">
async function loadMenuItems() {
    const category = document.getElementById('categoryFilter').value;
    let endpoint = '/menu-items/';
    if (category) {
        endpoint += `?category=${category}`;
    }

    try {
        const response = await apiCall(endpoint);
        const items = await response.json();
        displayMenuItems(items);
    } catch (error) {
        showToast('Błąd podczas ładowania menu', 'error');
    }
}

function displayMenuItems(items) {
    const tbody = document.getElementById('menuTableBody');
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    const isAdmin = user.role === 'admin' || user.role === 'waiter';

    tbody.innerHTML = '';

    items.forEach(item => {
        const row = tbody.insertRow();
        row.innerHTML = `
            <td>${item.name}</td>
            <td>${item.description}</td>
            <td>${getCategoryName(item.category)}</td>
            <td>${item.price} PLN</td>
            <td>${item.is_available ? 'Dostępne' : 'Niedostępne'}</td>
            ${isAdmin ? `<td>
                <button class="btn btn-sm btn-warning" onclick="toggleAvailability(${item.id}, ${item.is_available})">
                    ${item.is_available ? 'Ukryj' : 'Pokaż'}
                </button>
            </td>` : ''}
        `;
    });
}

function getCategoryName(category) {
    const categories = {
        'appetizer': 'Przystawka',
        'main': 'Danie główne',
        'dessert': 'Deser',
        'beverage': 'Napój'
    };
    return categories[category] || category;
}

async function addMenuItem(event) {
    event.preventDefault();

    const data = {
        name: document.getElementById('itemName').value,
        category: document.getElementById('itemCategory').value,
        description: document.getElementById('itemDescription').value,
        price: parseFloat(document.getElementById('itemPrice').value),
        preparation_time: parseInt(document.getElementById('itemPrepTime').value),
        is_vegetarian: document.getElementById('itemVegetarian').checked,
        is_vegan: document.getElementById('itemVegan').checked,
        is_gluten_free: document.getElementById('itemGlutenFree').checked,
        is_available: true
    };

    try {
        const response = await apiCall('/menu-items/', {
            method: 'POST',
            body: JSON.stringify(data)
        });

        if (response.ok) {
            showToast('Pozycja dodana pomyślnie', 'success');
            hideAddForm();
            loadMenuItems();
        } else {
            showToast('Błąd podczas dodawania pozycji', 'error');
        }
    } catch (error) {
        showToast('Błąd podczas dodawania pozycji', 'error');
    }
}

async function toggleAvailability(itemId, currentStatus) {
    try {
        const response = await apiCall(`/menu-items/${itemId}/`, {
            method: 'PATCH',
            body: JSON.stringify({ is_available: !currentStatus })
        });

        if (response.ok) {
            showToast('Status zmieniony', 'success');
            loadMenuItems();
        }
    } catch (error) {
        showToast('Błąd podczas zmiany statusu', 'error');
    }
}

function showAddForm() {
    document.getElementById('addMenuForm').style.display = 'block';
}

function hideAddForm() {
    document.getElementById('addMenuForm').style.display = 'none';
    document.getElementById('itemName').value = '';
    document.getElementById('itemDescription').value = '';
    document.getElementById('itemPrice').value = '';
    document.getElementById('itemPrepTime').value = '';
    document.getElementById('itemVegetarian').checked = false;
    document.getElementById('itemVegan').checked = false;
    document.getElementById('itemGlutenFree').checked = false;
}

window.addEventListener('DOMContentLoaded', () => {
    checkAuth();
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    if (user.role === 'admin' || user.role === 'waiter') {
        document.getElementById('addMenuBtn').style.display = 'block';
        document.getElementById('actionsHeader').style.display = 'table-cell';
    }

    loadMenuItems();
});
</file>

<file path="frontend/js/orders.js">
document.addEventListener('DOMContentLoaded', function() {
    if (!api.isAuthenticated()) {
        window.location.href = '../index.html';
        return;
    }

    const ordersList = document.getElementById('ordersList');
    const submitOrderBtn = document.getElementById('submitOrderBtn');
    const filterOrdersBtn = document.getElementById('filterOrdersBtn');
    const categorySelect = document.getElementById('categorySelect');
    const menuItemsForOrder = document.getElementById('menuItemsForOrder');
    const orderSummary = document.getElementById('orderSummary');
    const orderTotal = document.getElementById('orderTotal');

    const userRole = api.getUserRole();
    const isWaiter = userRole === 'waiter';
    const isAdmin = userRole === 'admin';

    let menuItems = [];
    let selectedItems = {};

    async function loadOrders() {
        try {
            const params = {};
            
            const status = document.getElementById('statusFilter').value;
            const orderType = document.getElementById('orderTypeFilter').value;
            
            if (status) params.status = status;
            if (orderType) params.order_type = orderType;

            const orders = await api.getOrders(params);
            displayOrders(orders);
        } catch (error) {
            ordersList.innerHTML = `<tr><td colspan="9" class="text-danger">Błąd ładowania zamówień: ${error.message}</td></tr>`;
        }
    }

    function displayOrders(orders) {
        if (orders.length === 0) {
            ordersList.innerHTML = '<tr><td colspan="9" class="text-center">Brak zamówień</td></tr>';
            return;
        }

        let html = '';
        orders.forEach(order => {
            const statusClass = `status-${order.status}`;
            const orderTypeText = {
                dine_in: 'Na miejscu',
                takeout: 'Na wynos',
                delivery: 'Dostawa'
            }[order.order_type];
            
            html += `
                <tr>
                    <td>${order.id}</td>
                    <td>${formatDateTime(order.created_at)}</td>
                    <td>${order.user.first_name} ${order.user.last_name}</td>
                    <td>${orderTypeText}</td>
                    <td><span class="status-badge ${statusClass}">${getStatusText(order.status, 'order')}</span></td>
                    <td>${order.items.length} pozycji</td>
                    <td>${formatPrice(order.final_amount)}</td>
                    <td>${order.waiter ? `${order.waiter.first_name} ${order.waiter.last_name}` : '-'}</td>
                    <td>
                        <button class="btn btn-sm btn-info view-order" data-id="${order.id}">Szczegóły</button>
                        ${(isWaiter || isAdmin) && order.status !== 'delivered' && order.status !== 'cancelled' ? `
                            <button class="btn btn-sm btn-primary update-status" data-id="${order.id}" data-status="${order.status}">Zmień status</button>
                        ` : ''}
                        ${(isWaiter || isAdmin) && !order.waiter ? `
                            <button class="btn btn-sm btn-success assign-waiter" data-id="${order.id}">Przypisz się</button>
                        ` : ''}
                    </td>
                </tr>
            `;
        });

        ordersList.innerHTML = html;

        document.querySelectorAll('.view-order').forEach(btn => {
            btn.addEventListener('click', handleViewOrder);
        });

        document.querySelectorAll('.update-status').forEach(btn => {
            btn.addEventListener('click', handleUpdateStatus);
        });

        document.querySelectorAll('.assign-waiter').forEach(btn => {
            btn.addEventListener('click', handleAssignWaiter);
        });
    }

    async function handleViewOrder(e) {
        const orderId = e.target.dataset.id;
        
        try {
            const orders = await api.getOrders();
            const order = orders.find(o => o.id == orderId);
            
            if (order) {
                const orderTypeText = {
                    dine_in: 'Na miejscu',
                    takeout: 'Na wynos',
                    delivery: 'Dostawa'
                }[order.order_type];

                let itemsHtml = '';
                order.items.forEach(item => {
                    itemsHtml += `
                        <tr>
                            <td>${item.menu_item_name}</td>
                            <td>${item.quantity}</td>
                            <td>${formatPrice(item.price)}</td>
                            <td>${formatPrice(item.subtotal)}</td>
                            <td>${item.notes || '-'}</td>
                        </tr>
                    `;
                });

                const content = `
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>Numer zamówienia:</strong> #${order.id}<br>
                            <strong>Data:</strong> ${formatDateTime(order.created_at)}<br>
                            <strong>Klient:</strong> ${order.user.first_name} ${order.user.last_name}<br>
                            <strong>Typ:</strong> ${orderTypeText}<br>
                            ${order.table_number ? `<strong>Stolik:</strong> ${order.table_number}<br>` : ''}
                        </div>
                        <div class="col-md-6">
                            <strong>Status:</strong> <span class="status-badge status-${order.status}">${getStatusText(order.status, 'order')}</span><br>
                            <strong>Kelner:</strong> ${order.waiter ? `${order.waiter.first_name} ${order.waiter.last_name}` : 'Nieprzypisany'}<br>
                            ${order.special_instructions ? `<strong>Instrukcje:</strong> ${order.special_instructions}<br>` : ''}
                        </div>
                    </div>
                    <h5>Pozycje zamówienia</h5>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Nazwa</th>
                                <th>Ilość</th>
                                <th>Cena</th>
                                <th>Suma</th>
                                <th>Uwagi</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHtml}
                        </tbody>
                    </table>
                    <div class="text-end">
                        <strong>Suma:</strong> ${formatPrice(order.total_amount)}<br>
                        ${order.discount_percentage > 0 ? `<strong>Rabat:</strong> ${order.discount_percentage}%<br>` : ''}
                        <h4>Do zapłaty: ${formatPrice(order.final_amount)}</h4>
                    </div>
                `;

                document.getElementById('orderDetailsContent').innerHTML = content;
                const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
                modal.show();
            }
        } catch (error) {
            alert('Błąd ładowania szczegółów zamówienia');
        }
    }

    async function handleUpdateStatus(e) {
        const orderId = e.target.dataset.id;
        const currentStatus = e.target.dataset.status;
        
        const statusFlow = {
            pending: 'preparing',
            preparing: 'ready',
            ready: 'delivered'
        };
        
        const nextStatus = statusFlow[currentStatus];
        
        if (nextStatus && confirm(`Zmienić status na "${getStatusText(nextStatus, 'order')}"?`)) {
            try {
                await api.updateOrderStatus(orderId, nextStatus);
                loadOrders();
            } catch (error) {
                alert('Błąd aktualizacji statusu: ' + error.message);
            }
        }
    }

    async function handleAssignWaiter(e) {
        const orderId = e.target.dataset.id;
        
        try {
            await api.assignWaiterToOrder(orderId);
            loadOrders();
        } catch (error) {
            alert('Błąd przypisywania kelnera: ' + error.message);
        }
    }

    async function loadMenuItemsForOrder() {
        try {
            const params = {};
            if (categorySelect.value) {
                params.category = categorySelect.value;
            }
            params.is_available = true;
            
            menuItems = await api.getMenuItems(params);
            displayMenuItemsForOrder();
        } catch (error) {
            menuItemsForOrder.innerHTML = `<div class="alert alert-danger">Błąd ładowania menu</div>`;
        }
    }

    function displayMenuItemsForOrder() {
        let html = '';
        
        menuItems.forEach(item => {
            const quantity = selectedItems[item.id] ? selectedItems[item.id].quantity : 0;
            
            html += `
                <div class="order-item">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <strong>${item.name}</strong><br>
                            <small>${item.description}</small>
                        </div>
                        <div class="col-md-3">
                            <span class="price">${formatPrice(item.price)}</span>
                        </div>
                        <div class="col-md-3">
                            <div class="quantity-control">
                                <button class="btn btn-sm btn-secondary decrease-quantity" data-id="${item.id}">-</button>
                                <span class="mx-2">${quantity}</span>
                                <button class="btn btn-sm btn-secondary increase-quantity" data-id="${item.id}">+</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        menuItemsForOrder.innerHTML = html;
        
        document.querySelectorAll('.increase-quantity').forEach(btn => {
            btn.addEventListener('click', handleIncreaseQuantity);
        });
        
        document.querySelectorAll('.decrease-quantity').forEach(btn => {
            btn.addEventListener('click', handleDecreaseQuantity);
        });
    }

    function handleIncreaseQuantity(e) {
        const itemId = parseInt(e.target.dataset.id);
        const item = menuItems.find(i => i.id === itemId);
        
        if (!selectedItems[itemId]) {
            selectedItems[itemId] = {
                item: item,
                quantity: 0
            };
        }
        
        selectedItems[itemId].quantity++;
        displayMenuItemsForOrder();
        updateOrderSummary();
    }

    function handleDecreaseQuantity(e) {
        const itemId = parseInt(e.target.dataset.id);
        
        if (selectedItems[itemId] && selectedItems[itemId].quantity > 0) {
            selectedItems[itemId].quantity--;
            
            if (selectedItems[itemId].quantity === 0) {
                delete selectedItems[itemId];
            }
        }
        
        displayMenuItemsForOrder();
        updateOrderSummary();
    }

    function updateOrderSummary() {
        let html = '';
        let total = 0;
        
        Object.values(selectedItems).forEach(({ item, quantity }) => {
            const subtotal = item.price * quantity;
            total += subtotal;
            
            html += `
                <div class="d-flex justify-content-between mb-2">
                    <span>${quantity}x ${item.name}</span>
                    <span>${formatPrice(subtotal)}</span>
                </div>
            `;
        });
        
        orderSummary.innerHTML = html || '<p class="text-muted">Brak wybranych pozycji</p>';
        orderTotal.textContent = formatPrice(total);
    }

    submitOrderBtn.addEventListener('click', async function() {
        if (Object.keys(selectedItems).length === 0) {
            alert('Wybierz przynajmniej jedną pozycję');
            return;
        }
        
        const orderData = {
            order_type: document.getElementById('orderType').value,
            special_instructions: document.getElementById('specialInstructions').value,
            items: []
        };
        
        const tableNumber = document.getElementById('tableNumber').value;
        if (tableNumber) {
            orderData.table_number = parseInt(tableNumber);
        }
        
        const promoCode = document.getElementById('promoCode').value;
        if (promoCode) {
            orderData.promo_code = promoCode;
        }
        
        Object.entries(selectedItems).forEach(([itemId, { quantity }]) => {
            orderData.items.push({
                menu_item_id: parseInt(itemId),
                quantity: quantity
            });
        });
        
        try {
            await api.createOrder(orderData);
            const modal = bootstrap.Modal.getInstance(document.getElementById('createOrderModal'));
            modal.hide();
            document.getElementById('createOrderForm').reset();
            selectedItems = {};
            loadOrders();
            alert('Zamówienie zostało złożone!');
        } catch (error) {
            alert('Błąd składania zamówienia: ' + error.message);
        }
    });

    categorySelect.addEventListener('change', loadMenuItemsForOrder);
    filterOrdersBtn.addEventListener('click', loadOrders);

    loadOrders();
    loadMenuItemsForOrder();
});
</file>

<file path="frontend/js/reservations.js">
async function loadReservations() {
    try {
        const response = await apiCall('/reservations/');
        const reservations = await response.json();
        displayReservations(reservations);
    } catch (error) {
        showToast('Błąd podczas ładowania rezerwacji', 'error');
    }
}

function displayReservations(reservations) {
    const tbody = document.getElementById('reservationsTableBody');
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    const isStaff = user.role === 'admin' || user.role === 'waiter';

    tbody.innerHTML = '';

    reservations.forEach(reservation => {
        const row = tbody.insertRow();
        row.innerHTML = `
            <td>${reservation.date}</td>
            <td>${reservation.time}</td>
            <td>${reservation.party_size}</td>
            <td>${getStatusName(reservation.status)}</td>
            <td>${reservation.table_number || '-'}</td>
            ${isStaff ? `<td>${reservation.user.first_name} ${reservation.user.last_name}</td>` : ''}
            <td>
                ${reservation.status === 'pending' ? `
                    <button class="btn btn-sm btn-success" onclick="updateReservationStatus(${reservation.id}, 'confirmed')">Potwierdź</button>
                    <button class="btn btn-sm btn-danger" onclick="updateReservationStatus(${reservation.id}, 'cancelled')">Anuluj</button>
                ` : ''}
                ${reservation.status === 'confirmed' && isStaff ? `
                    <button class="btn btn-sm btn-primary" onclick="assignTable(${reservation.id})">Przypisz stolik</button>
                ` : ''}
            </td>
        `;
    });
}

function getStatusName(status) {
    const statuses = {
        'pending': 'Oczekuje',
        'confirmed': 'Potwierdzona',
        'cancelled': 'Anulowana',
        'completed': 'Zakończona'
    };
    return statuses[status] || status;
}

async function createReservation(event) {
    event.preventDefault();

    const data = {
        date: document.getElementById('resDate').value,
        time: document.getElementById('resTime').value,
        party_size: parseInt(document.getElementById('resPartySize').value),
        special_requests: document.getElementById('resRequests').value
    };

    try {
        const response = await apiCall('/reservations/', {
            method: 'POST',
            body: JSON.stringify(data)
        });

        if (response.ok) {
            showToast('Rezerwacja utworzona pomyślnie', 'success');
            hideReservationForm();
            loadReservations();
        } else {
            showToast('Błąd podczas tworzenia rezerwacji', 'error');
        }
    } catch (error) {
        showToast('Błąd podczas tworzenia rezerwacji', 'error');
    }
}

async function updateReservationStatus(reservationId, newStatus) {
    try {
        const response = await apiCall(`/reservations/${reservationId}/`, {
            method: 'PATCH',
            body: JSON.stringify({ status: newStatus })
        });

        if (response.ok) {
            showToast('Status zaktualizowany', 'success');
            loadReservations();
        }
    } catch (error) {
        showToast('Błąd podczas aktualizacji statusu', 'error');
    }
}

async function assignTable(reservationId) {
    const tableNumber = prompt('Numer stolika:');
    if (tableNumber) {
        try {
            const response = await apiCall(`/reservations/${reservationId}/`, {
                method: 'PATCH',
                body: JSON.stringify({ table_number: parseInt(tableNumber) })
            });

            if (response.ok) {
                showToast('Stolik przypisany', 'success');
                loadReservations();
            }
        } catch (error) {
            showToast('Błąd podczas przypisywania stolika', 'error');
        }
    }
}

function showReservationForm() {
    document.getElementById('reservationForm').style.display = 'block';
}

function hideReservationForm() {
    document.getElementById('reservationForm').style.display = 'none';
    document.getElementById('resDate').value = '';
    document.getElementById('resTime').value = '';
    document.getElementById('resPartySize').value = '';
    document.getElementById('resRequests').value = '';
}

window.addEventListener('DOMContentLoaded', () => {
    checkAuth();
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    if (user.role === 'admin' || user.role === 'waiter') {
        document.getElementById('guestHeader').style.display = 'table-cell';
    }

    const today = new Date().toISOString().split('T')[0];
    document.getElementById('resDate').min = today;

    loadReservations();
});
</file>

<file path="frontend/pages/admin.html">
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel Administracyjny - System Zarządzania Restauracją</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="../css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="../index.html">Restauracja</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="menu.html">Menu</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="reservations.html">Rezerwacje</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="orders.html">Zamówienia</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="admin.html">Panel Administracyjny</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="logout()">Wyloguj</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <h1 class="mb-4">Panel Administracyjny</h1>

        <div class="row">
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Raport sprzedaży</h5>
                        <div id="salesReport">
                            <p>Ładowanie...</p>
                        </div>
                        <button class="btn btn-primary mt-3" onclick="loadSalesReport()">Odśwież</button>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Stan magazynu</h5>
                        <div id="inventoryReport">
                            <p>Ładowanie...</p>
                        </div>
                        <button class="btn btn-primary mt-3" onclick="loadInventoryReport()">Odśwież</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Składniki - niski stan</h5>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Nazwa</th>
                                <th>Ilość</th>
                                <th>Min. ilość</th>
                                <th>Dostawca</th>
                            </tr>
                        </thead>
                        <tbody id="lowStockTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../js/api.js"></script>
    <script src="../js/auth.js"></script>
    <script src="../js/admin.js"></script>
</body>
</html>
</file>

<file path="frontend/pages/menu.html">
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu - System Zarządzania Restauracją</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="../css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="../index.html">Restauracja</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="menu.html">Menu</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="reservations.html">Rezerwacje</a>
                    </li>
                    <li class="nav-item" id="navOrders">
                        <a class="nav-link" href="orders.html">Zamówienia</a>
                    </li>
                    <li class="nav-item" id="navAdmin" style="display:none;">
                        <a class="nav-link" href="admin.html">Panel Administracyjny</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="logout()">Wyloguj</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <h1 class="mb-4">Menu Restauracji</h1>

        <div class="row mb-3">
            <div class="col-md-6">
                <select class="form-select" id="categoryFilter" onchange="loadMenuItems()">
                    <option value="">Wszystkie kategorie</option>
                    <option value="appetizer">Przystawki</option>
                    <option value="main">Dania główne</option>
                    <option value="dessert">Desery</option>
                    <option value="beverage">Napoje</option>
                </select>
            </div>
            <div class="col-md-6 text-end" id="addMenuBtn" style="display:none;">
                <button class="btn btn-primary" onclick="showAddForm()">Dodaj pozycję</button>
            </div>
        </div>

        <div id="addMenuForm" class="card mb-4" style="display:none;">
            <div class="card-body">
                <h5 class="card-title">Dodaj nową pozycję menu</h5>
                <form onsubmit="addMenuItem(event)">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Nazwa</label>
                            <input type="text" class="form-control" id="itemName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Kategoria</label>
                            <select class="form-select" id="itemCategory" required>
                                <option value="appetizer">Przystawka</option>
                                <option value="main">Danie główne</option>
                                <option value="dessert">Deser</option>
                                <option value="beverage">Napój</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Opis</label>
                        <textarea class="form-control" id="itemDescription" rows="2" required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Cena (PLN)</label>
                            <input type="number" class="form-control" id="itemPrice" step="0.01" required>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Czas przygotowania (min)</label>
                            <input type="number" class="form-control" id="itemPrepTime" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="itemVegetarian">
                                <label class="form-check-label" for="itemVegetarian">Wegetariańskie</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="itemVegan">
                                <label class="form-check-label" for="itemVegan">Wegańskie</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="itemGlutenFree">
                                <label class="form-check-label" for="itemGlutenFree">Bezglutenowe</label>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Dodaj</button>
                    <button type="button" class="btn btn-secondary" onclick="hideAddForm()">Anuluj</button>
                </form>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nazwa</th>
                        <th>Opis</th>
                        <th>Kategoria</th>
                        <th>Cena</th>
                        <th>Dostępność</th>
                        <th id="actionsHeader" style="display:none;">Akcje</th>
                    </tr>
                </thead>
                <tbody id="menuTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../js/api.js"></script>
    <script src="../js/auth.js"></script>
    <script src="../js/menu.js"></script>
</body>
</html>
</file>

<file path="frontend/pages/orders.html">
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zamówienia - System Zarządzania Restauracją</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="../css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="../index.html">Restauracja</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="menu.html">Menu</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="reservations.html">Rezerwacje</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="orders.html">Zamówienia</a>
                    </li>
                    <li class="nav-item" id="navAdmin" style="display:none;">
                        <a class="nav-link" href="admin.html">Panel Administracyjny</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="logout()">Wyloguj</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <h1 class="mb-4">Zamówienia</h1>

        <div class="row mb-4">
            <div class="col-md-12">
                <button class="btn btn-primary" onclick="showOrderForm()">Nowe zamówienie</button>
            </div>
        </div>

        <div id="orderForm" class="card mb-4" style="display:none;">
            <div class="card-body">
                <h5 class="card-title">Nowe zamówienie</h5>
                <form onsubmit="createOrder(event)">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Typ zamówienia</label>
                            <select class="form-select" id="orderType" required>
                                <option value="dine_in">Na miejscu</option>
                                <option value="takeout">Na wynos</option>
                                <option value="delivery">Dostawa</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Numer stolika</label>
                            <input type="number" class="form-control" id="tableNumber">
                        </div>
                    </div>

                    <h6>Pozycje zamówienia</h6>
                    <div id="orderItems" class="mb-3">
                        <div class="row mb-2">
                            <div class="col-md-6">
                                <select class="form-select menu-item-select" required>
                                    <option value="">Wybierz danie</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="number" class="form-control" placeholder="Ilość" min="1" value="1" required>
                            </div>
                            <div class="col-md-3">
                                <button type="button" class="btn btn-sm btn-danger" onclick="removeOrderItem(this)">Usuń</button>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-sm btn-secondary mb-3" onclick="addOrderItem()">Dodaj pozycję</button>

                    <div class="mb-3">
                        <label class="form-label">Uwagi do zamówienia</label>
                        <textarea class="form-control" id="specialInstructions" rows="2"></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary">Złóż zamówienie</button>
                    <button type="button" class="btn btn-secondary" onclick="hideOrderForm()">Anuluj</button>
                </form>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>Data</th>
                        <th>Typ</th>
                        <th>Status</th>
                        <th>Kwota</th>
                        <th>Pozycje</th>
                        <th>Akcje</th>
                    </tr>
                </thead>
                <tbody id="ordersTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../js/api.js"></script>
    <script src="../js/auth.js"></script>
    <script src="../js/orders.js"></script>
</body>
</html>
</file>

<file path="frontend/pages/register.html">
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rejestracja - System Zarządzania Restauracją</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="../css/style.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h2 class="card-title text-center mb-4">Rejestracja</h2>
                        <form onsubmit="register(event)">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Imię</label>
                                    <input type="text" class="form-control" id="firstName" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Nazwisko</label>
                                    <input type="text" class="form-control" id="lastName" required>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Telefon</label>
                                <input type="tel" class="form-control" id="phone">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Hasło</label>
                                <input type="password" class="form-control" id="password" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Potwierdź hasło</label>
                                <input type="password" class="form-control" id="passwordConfirm" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Zarejestruj</button>
                        </form>
                        <div class="text-center mt-3">
                            <a href="../index.html">Powrót do logowania</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../js/api.js"></script>
    <script>
        async function register(event) {
            event.preventDefault();

            const password = document.getElementById('password').value;
            const passwordConfirm = document.getElementById('passwordConfirm').value;

            if (password !== passwordConfirm) {
                showToast('Hasła nie są identyczne', 'error');
                return;
            }

            const data = {
                first_name: document.getElementById('firstName').value,
                last_name: document.getElementById('lastName').value,
                email: document.getElementById('email').value,
                phone: document.getElementById('phone').value,
                password: password,
                password_confirm: passwordConfirm
            };

            try {
                const response = await fetch(`${API_BASE}/auth/register/`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    showToast('Rejestracja zakończona pomyślnie', 'success');
                    setTimeout(() => {
                        window.location.href = '../index.html';
                    }, 2000);
                } else {
                    const errors = await response.json();
                    showToast('Błąd rejestracji', 'error');
                }
            } catch (error) {
                showToast('Błąd podczas rejestracji', 'error');
            }
        }
    </script>
</body>
</html>
</file>

<file path="frontend/pages/reservations.html">
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rezerwacje - System Zarządzania Restauracją</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="../css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="../index.html">Restauracja</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="menu.html">Menu</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="reservations.html">Rezerwacje</a>
                    </li>
                    <li class="nav-item" id="navOrders">
                        <a class="nav-link" href="orders.html">Zamówienia</a>
                    </li>
                    <li class="nav-item" id="navAdmin" style="display:none;">
                        <a class="nav-link" href="admin.html">Panel Administracyjny</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="logout()">Wyloguj</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <h1 class="mb-4">Rezerwacje</h1>

        <div class="row mb-4">
            <div class="col-md-12">
                <button class="btn btn-primary" onclick="showReservationForm()">Nowa rezerwacja</button>
            </div>
        </div>

        <div id="reservationForm" class="card mb-4" style="display:none;">
            <div class="card-body">
                <h5 class="card-title">Nowa rezerwacja</h5>
                <form onsubmit="createReservation(event)">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Data</label>
                            <input type="date" class="form-control" id="resDate" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Godzina</label>
                            <input type="time" class="form-control" id="resTime" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Liczba osób</label>
                            <input type="number" class="form-control" id="resPartySize" min="1" max="20" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Specjalne życzenia</label>
                        <textarea class="form-control" id="resRequests" rows="2"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Zarezerwuj</button>
                    <button type="button" class="btn btn-secondary" onclick="hideReservationForm()">Anuluj</button>
                </form>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Godzina</th>
                        <th>Liczba osób</th>
                        <th>Status</th>
                        <th>Stolik</th>
                        <th id="guestHeader" style="display:none;">Gość</th>
                        <th>Akcje</th>
                    </tr>
                </thead>
                <tbody id="reservationsTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../js/api.js"></script>
    <script src="../js/auth.js"></script>
    <script src="../js/reservations.js"></script>
</body>
</html>
</file>

<file path="frontend/index.html">
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Zarządzania Restauracją</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="index.html">Restauracja</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto" id="navMenu">
                    <li class="nav-item">
                        <a class="nav-link" href="pages/menu.html">Menu</a>
                    </li>
                    <li class="nav-item" id="navReservations">
                        <a class="nav-link" href="pages/reservations.html">Rezerwacje</a>
                    </li>
                    <li class="nav-item" id="navOrders">
                        <a class="nav-link" href="pages/orders.html">Zamówienia</a>
                    </li>
                    <li class="nav-item" id="navAdmin" style="display:none;">
                        <a class="nav-link" href="pages/admin.html">Panel Administracyjny</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="logout()">Wyloguj</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <div id="loginForm" class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h2 class="card-title text-center mb-4">Logowanie</h2>
                        <form onsubmit="login(event)">
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Hasło</label>
                                <input type="password" class="form-control" id="password" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Zaloguj</button>
                        </form>
                        <div class="text-center mt-3">
                            <a href="pages/register.html">Zarejestruj się</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="dashboard" style="display:none;">
            <h1 class="mb-4">Witaj, <span id="userName"></span>!</h1>
            <div class="row">
                <div class="col-md-4">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Menu</h5>
                            <p class="card-text">Przeglądaj dostępne dania</p>
                            <a href="pages/menu.html" class="btn btn-primary">Przejdź do menu</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-4" id="dashReservations">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Rezerwacje</h5>
                            <p class="card-text">Zarządzaj rezerwacjami stolików</p>
                            <a href="pages/reservations.html" class="btn btn-primary">Rezerwacje</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-4" id="dashOrders">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Zamówienia</h5>
                            <p class="card-text">Przeglądaj i zarządzaj zamówieniami</p>
                            <a href="pages/orders.html" class="btn btn-primary">Zamówienia</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="js/api.js"></script>
    <script src="js/auth.js"></script>
</body>
</html>
</file>

</files>
